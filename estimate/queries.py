from sqlalchemy import select, delete, and_, insert, func, join, literal_column, outerjoin, or_
from apps.estimate.models import IncomeState, exRate, eliminate 

exchange_fx_query = select(
    # (IncomeState.id).label('id'),
    (IncomeState.version).label('version'),
    (IncomeState.year).label('year'),
    (IncomeState.mm).label('mm'),
    (IncomeState.company).label('company'),
    (literal_column('"EXW"')).label('curr'),
    (IncomeState.Sales*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Sales'),
    (IncomeState.CGS*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('CGS'),
    (IncomeState.CGM*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('CGM'),
    (IncomeState.Freight*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Freight'),
    (IncomeState.Insure_ex*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Insure_ex'),
    (IncomeState.GP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('GP'),
    (IncomeState.SalesExpences*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('SalesExpences'),
    (IncomeState.Agent_ex*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Agent_ex'),
    (IncomeState.Agent_inland*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Agent_inland'),
    (IncomeState.Moving_ex*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Moving_ex'),
    (IncomeState.Moving_inland*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Moving_inland'),
    (IncomeState.Insure_PL*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Insure_PL'),
    (IncomeState.Comp_ex*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Comp_ex'),
    (IncomeState.Comp_inland*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Comp_inland'),
    (IncomeState.Packing_ex*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Packing_ex'),
    (IncomeState.Packing_inland*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Packing_inland'),
    (IncomeState.Royalty_inland*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Royalty_inland'),
    (IncomeState.Royalty_ex*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Royalty_ex'),
    (IncomeState.Advertisement_ex*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Advertisement_ex'),
    (IncomeState.Advertisement_inland*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Advertisement_inland'),
    (IncomeState.OperatingProfit1*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OperatingProfit1'),
    (IncomeState.AdminExpences*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('AdminExpences'),
    (IncomeState.SalaryBOD*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('SalaryBOD'),
    (IncomeState.Salary*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Salary'),
    (IncomeState.Pension*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Pension'),
    (IncomeState.EmployBenefit*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('EmployBenefit'),
    (IncomeState.Travel*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Travel'),
    (IncomeState.Telecommunication*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Telecommunication'),
    (IncomeState.Utilities*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Utilities'),
    (IncomeState.TaxesAndDues*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('TaxesAndDues'),
    (IncomeState.Rent*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Rent'),
    (IncomeState.Depreciation*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Depreciation'),
    (IncomeState.Amortization*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Amortization'),
    (IncomeState.Maintanance*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Maintanance'),
    (IncomeState.Insurance*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Insurance'),
    (IncomeState.Entertainment*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Entertainment'),
    (IncomeState.SampleFee*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('SampleFee'),
    (IncomeState.TransportFee*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('TransportFee'),
    (IncomeState.Commission*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Commission'),
    (IncomeState.Service*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Service'),
    (IncomeState.BedDept*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('BedDept'),
    (IncomeState.Consumable*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Consumable'),
    (IncomeState.Training*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Training'),
    (IncomeState.BooksAndPrinting*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('BooksAndPrinting'),
    (IncomeState.Vehicle*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Vehicle'),
    (IncomeState.Conference*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Conference'),
    (IncomeState.Miscellaneous*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Miscellaneous'),
    (IncomeState.Overseas*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Overseas'),
    (IncomeState.Warehouse*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Warehouse'),
    (IncomeState.ReversalBadDebt*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('ReversalBadDebt'),
    (IncomeState.ResearchDevelopment*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('ResearchDevelopment'),
    (IncomeState.LeaseAmortization*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('LeaseAmortization'),
    (IncomeState.OperatingProfit2*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OperatingProfit2'),
    (IncomeState.NonOperatingRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('NonOperatingRevenue'),
    (IncomeState.FinancialRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FinancialRevenue'),
    (IncomeState.InterestRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('InterestRevenue'),
    (IncomeState.TradingSecuritiesInterest*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('TradingSecuritiesInterest'),
    (IncomeState.FxRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxRevenue'),
    (IncomeState.FxRevenue_Operating*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxRevenue_Operating'),
    (IncomeState.FxIncone_NonOp*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxIncone_NonOp'),
    (IncomeState.DerivativesRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DerivativesRevenue'),
    (IncomeState.TradingSecuritiesRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('TradingSecuritiesRevenue'),
    (IncomeState.OtherNonOPRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OtherNonOPRevenue'),
    (IncomeState.DividentRevenue*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DividentRevenue'),
    (IncomeState.MiscellaneousProfit*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('MiscellaneousProfit'),
    (IncomeState.Gain_disposal_assets*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Gain_disposal_assets'),
    (IncomeState.Gain_OtherNonOP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Gain_OtherNonOP'),
    (IncomeState.ReversalNRV*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('ReversalNRV'),
    (IncomeState.ReversalOtherAllowance*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('ReversalOtherAllowance'),
    (IncomeState.NonOperatingEnpences*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('NonOperatingEnpences'),
    (IncomeState.FinancialCost*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FinancialCost'),
    (IncomeState.Interest*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Interest'),
    (IncomeState.BondInterest*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('BondInterest'),
    (IncomeState.LossDisposalAR*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('LossDisposalAR'),
    (IncomeState.FxLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxLoss'),
    (IncomeState.FxLoss_Operating*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxLoss_Operating'),
    (IncomeState.FxLoss_NonOP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxLoss_NonOP'),
    (IncomeState.DerivativesLoss_tot*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DerivativesLoss_tot'),
    (IncomeState.DerivativesLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DerivativesLoss'),
    (IncomeState.TradingSecuritiesLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('TradingSecuritiesLoss'),
    (IncomeState.OtherNonOPLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OtherNonOPLoss'),
    (IncomeState.Donation*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Donation'),
    (IncomeState.Loss_disposal_assets*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Loss_disposal_assets'),
    (IncomeState.Loss_disposal_inventory*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Loss_disposal_inventory'),
    (IncomeState.Loss_OtherNonOP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Loss_OtherNonOP'),
    (IncomeState.MiscellaneousLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('MiscellaneousLoss'),
    (IncomeState.OtherAllowance*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OtherAllowance'),
    (IncomeState.OrdinaryIncome1*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OrdinaryIncome1'),
    (IncomeState.Gain_disposal_assets_NonOP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Gain_disposal_assets_NonOP'),
    (IncomeState.DebtForgiveness*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DebtForgiveness'),
    (IncomeState.LeaseInterestIncome*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('LeaseInterestIncome'),
    (IncomeState.OtherSpecialGain*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OtherSpecialGain'),
    (IncomeState.Loss_disposal_assets_NonOP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Loss_disposal_assets_NonOP'),
    (IncomeState.DebtForgivenessAmortization*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DebtForgivenessAmortization'),
    (IncomeState.LeaseInterestCost*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('LeaseInterestCost'),
    (IncomeState.OtherSpecialLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OtherSpecialLoss'),
    (IncomeState.ValuationLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('ValuationLoss'),
    (IncomeState.OrdinaryIncome2*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OrdinaryIncome2'),
    (IncomeState.FxValuation*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxValuation'),
    (IncomeState.FxValuationGain_OP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxValuationGain_OP'),
    (IncomeState.FxValuationGain_NonOP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxValuationGain_NonOP'),
    (IncomeState.FxValuationLoss_OP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxValuationLoss_OP'),
    (IncomeState.FxValuationLoss_NonOP*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('FxValuationLoss_NonOP'),
    (IncomeState.DerivativesVauation*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DerivativesVauation'),
    (IncomeState.DerivativesVauationGain*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DerivativesVauationGain'),
    (IncomeState.DerivativesVauationLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('DerivativesVauationLoss'),
    (IncomeState.OrdinaryIncome3*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OrdinaryIncome3'),
    (IncomeState.SecuritiesGain*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('SecuritiesGain'),
    (IncomeState.SecuritiesLoss*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('SecuritiesLoss'),
    (IncomeState.OrdinaryIncome4*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('OrdinaryIncome4'),
    (IncomeState.Tax*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('Tax'),
    (IncomeState.NetIncome*exRate.rate/func.IF(IncomeState.curr == 'KRW',1,1000)).label('NetIncome')
).outerjoin(exRate, and_(IncomeState.curr == exRate.curr, IncomeState.version == exRate.version, IncomeState.mm == exRate.mm))

sum_IS_query = select(
    (IncomeState.version).label('version'),
    (IncomeState.year).label('year'),
    (IncomeState.mm).label('mm'),
    (literal_column('"9900"')).label('company'),
    (literal_column('"KRW"')).label('curr'),
    func.sum(IncomeState.Sales).label('Sales'),
    func.sum(IncomeState.CGS).label('CGS'),
    func.sum(IncomeState.CGM).label('CGM'),
    func.sum(IncomeState.Freight).label('Freight'),
    func.sum(IncomeState.Insure_ex).label('Insure_ex'),
    func.sum(IncomeState.GP).label('GP'),
    func.sum(IncomeState.SalesExpences).label('SalesExpences'),
    func.sum(IncomeState.Agent_ex).label('Agent_ex'),
    func.sum(IncomeState.Agent_inland).label('Agent_inland'),
    func.sum(IncomeState.Moving_ex).label('Moving_ex'),
    func.sum(IncomeState.Moving_inland).label('Moving_inland'),
    func.sum(IncomeState.Insure_PL).label('Insure_PL'),
    func.sum(IncomeState.Comp_ex).label('Comp_ex'),
    func.sum(IncomeState.Comp_inland).label('Comp_inland'),
    func.sum(IncomeState.Packing_ex).label('Packing_ex'),
    func.sum(IncomeState.Packing_inland).label('Packing_inland'),
    func.sum(IncomeState.Royalty_inland).label('Royalty_inland'),
    func.sum(IncomeState.Royalty_ex).label('Royalty_ex'),
    func.sum(IncomeState.Advertisement_ex).label('Advertisement_ex'),
    func.sum(IncomeState.Advertisement_inland).label('Advertisement_inland'),
    func.sum(IncomeState.OperatingProfit1).label('OperatingProfit1'),
    func.sum(IncomeState.AdminExpences).label('AdminExpences'),
    func.sum(IncomeState.SalaryBOD).label('SalaryBOD'),
    func.sum(IncomeState.Salary).label('Salary'),
    func.sum(IncomeState.Pension).label('Pension'),
    func.sum(IncomeState.EmployBenefit).label('EmployBenefit'),
    func.sum(IncomeState.Travel).label('Travel'),
    func.sum(IncomeState.Telecommunication).label('Telecommunication'),
    func.sum(IncomeState.Utilities).label('Utilities'),
    func.sum(IncomeState.TaxesAndDues).label('TaxesAndDues'),
    func.sum(IncomeState.Rent).label('Rent'),
    func.sum(IncomeState.Depreciation).label('Depreciation'),
    func.sum(IncomeState.Amortization).label('Amortization'),
    func.sum(IncomeState.Maintanance).label('Maintanance'),
    func.sum(IncomeState.Insurance).label('Insurance'),
    func.sum(IncomeState.Entertainment).label('Entertainment'),
    func.sum(IncomeState.SampleFee).label('SampleFee'),
    func.sum(IncomeState.TransportFee).label('TransportFee'),
    func.sum(IncomeState.Commission).label('Commission'),
    func.sum(IncomeState.Service).label('Service'),
    func.sum(IncomeState.BedDept).label('BedDept'),
    func.sum(IncomeState.Consumable).label('Consumable'),
    func.sum(IncomeState.Training).label('Training'),
    func.sum(IncomeState.BooksAndPrinting).label('BooksAndPrinting'),
    func.sum(IncomeState.Vehicle).label('Vehicle'),
    func.sum(IncomeState.Conference).label('Conference'),
    func.sum(IncomeState.Miscellaneous).label('Miscellaneous'),
    func.sum(IncomeState.Overseas).label('Overseas'),
    func.sum(IncomeState.Warehouse).label('Warehouse'),
    func.sum(IncomeState.ReversalBadDebt).label('ReversalBadDebt'),
    func.sum(IncomeState.ResearchDevelopment).label('ResearchDevelopment'),
    func.sum(IncomeState.LeaseAmortization).label('LeaseAmortization'),
    func.sum(IncomeState.OperatingProfit2).label('OperatingProfit2'),
    func.sum(IncomeState.NonOperatingRevenue).label('NonOperatingRevenue'),
    func.sum(IncomeState.FinancialRevenue).label('FinancialRevenue'),
    func.sum(IncomeState.InterestRevenue).label('InterestRevenue'),
    func.sum(IncomeState.TradingSecuritiesInterest).label('TradingSecuritiesInterest'),
    func.sum(IncomeState.FxRevenue).label('FxRevenue'),
    func.sum(IncomeState.FxRevenue_Operating).label('FxRevenue_Operating'),
    func.sum(IncomeState.FxIncone_NonOp).label('FxIncone_NonOp'),
    func.sum(IncomeState.DerivativesRevenue).label('DerivativesRevenue'),
    func.sum(IncomeState.TradingSecuritiesRevenue).label('TradingSecuritiesRevenue'),
    func.sum(IncomeState.OtherNonOPRevenue).label('OtherNonOPRevenue'),
    func.sum(IncomeState.DividentRevenue).label('DividentRevenue'),
    func.sum(IncomeState.MiscellaneousProfit).label('MiscellaneousProfit'),
    func.sum(IncomeState.Gain_disposal_assets).label('Gain_disposal_assets'),
    func.sum(IncomeState.Gain_OtherNonOP).label('Gain_OtherNonOP'),
    func.sum(IncomeState.ReversalNRV).label('ReversalNRV'),
    func.sum(IncomeState.ReversalOtherAllowance).label('ReversalOtherAllowance'),
    func.sum(IncomeState.NonOperatingEnpences).label('NonOperatingEnpences'),
    func.sum(IncomeState.FinancialCost).label('FinancialCost'),
    func.sum(IncomeState.Interest).label('Interest'),
    func.sum(IncomeState.BondInterest).label('BondInterest'),
    func.sum(IncomeState.LossDisposalAR).label('LossDisposalAR'),
    func.sum(IncomeState.FxLoss).label('FxLoss'),
    func.sum(IncomeState.FxLoss_Operating).label('FxLoss_Operating'),
    func.sum(IncomeState.FxLoss_NonOP).label('FxLoss_NonOP'),
    func.sum(IncomeState.DerivativesLoss_tot).label('DerivativesLoss_tot'),
    func.sum(IncomeState.DerivativesLoss).label('DerivativesLoss'),
    func.sum(IncomeState.TradingSecuritiesLoss).label('TradingSecuritiesLoss'),
    func.sum(IncomeState.OtherNonOPLoss).label('OtherNonOPLoss'),
    func.sum(IncomeState.Donation).label('Donation'),
    func.sum(IncomeState.Loss_disposal_assets).label('Loss_disposal_assets'),
    func.sum(IncomeState.Loss_disposal_inventory).label('Loss_disposal_inventory'),
    func.sum(IncomeState.Loss_OtherNonOP).label('Loss_OtherNonOP'),
    func.sum(IncomeState.MiscellaneousLoss).label('MiscellaneousLoss'),
    func.sum(IncomeState.OtherAllowance).label('OtherAllowance'),
    func.sum(IncomeState.OrdinaryIncome1).label('OrdinaryIncome1'),
    func.sum(IncomeState.Gain_disposal_assets_NonOP).label('Gain_disposal_assets_NonOP'),
    func.sum(IncomeState.DebtForgiveness).label('DebtForgiveness'),
    func.sum(IncomeState.LeaseInterestIncome).label('LeaseInterestIncome'),
    func.sum(IncomeState.OtherSpecialGain).label('OtherSpecialGain'),
    func.sum(IncomeState.Loss_disposal_assets_NonOP).label('Loss_disposal_assets_NonOP'),
    func.sum(IncomeState.DebtForgivenessAmortization).label('DebtForgivenessAmortization'),
    func.sum(IncomeState.LeaseInterestCost).label('LeaseInterestCost'),
    func.sum(IncomeState.OtherSpecialLoss).label('OtherSpecialLoss'),
    func.sum(IncomeState.ValuationLoss).label('ValuationLoss'),
    func.sum(IncomeState.OrdinaryIncome2).label('OrdinaryIncome2'),
    func.sum(IncomeState.FxValuation).label('FxValuation'),
    func.sum(IncomeState.FxValuationGain_OP).label('FxValuationGain_OP'),
    func.sum(IncomeState.FxValuationGain_NonOP).label('FxValuationGain_NonOP'),
    func.sum(IncomeState.FxValuationLoss_OP).label('FxValuationLoss_OP'),
    func.sum(IncomeState.FxValuationLoss_NonOP).label('FxValuationLoss_NonOP'),
    func.sum(IncomeState.DerivativesVauation).label('DerivativesVauation'),
    func.sum(IncomeState.DerivativesVauationGain).label('DerivativesVauationGain'),
    func.sum(IncomeState.DerivativesVauationLoss).label('DerivativesVauationLoss'),
    func.sum(IncomeState.OrdinaryIncome3).label('OrdinaryIncome3'),
    func.sum(IncomeState.SecuritiesGain).label('SecuritiesGain'),
    func.sum(IncomeState.SecuritiesLoss).label('SecuritiesLoss'),
    func.sum(IncomeState.OrdinaryIncome4).label('OrdinaryIncome4'),
    func.sum(IncomeState.Tax).label('Tax'),
    func.sum(IncomeState.NetIncome).label('NetIncome')
).group_by('version','year','mm')

search_1 = select(
        eliminate.id,
        eliminate.content,
        eliminate.account,
        eliminate.jan,
        eliminate.feb,
        eliminate.mar,
        eliminate.apr,
        eliminate.may,
        eliminate.jun,
        eliminate.jul,
        eliminate.aug,
        eliminate.sep,
        eliminate.oct,
        eliminate.nov,
        eliminate.dec,
        eliminate.tot_month
        )

# 메인화면의 내용을 조회하기 위한 쿼리
sum_IS_normal = select(
    (IncomeState.mm).label('mm'),
    func.sum(IncomeState.Sales).label('Sales'),
    func.sum(IncomeState.CGS).label('CGS'),
    func.sum(IncomeState.CGM).label('CGM'),
    func.sum(IncomeState.Freight).label('Freight'),
    func.sum(IncomeState.Insure_ex).label('Insure_ex'),
    func.sum(IncomeState.GP).label('GP'),
    func.sum(IncomeState.SalesExpences).label('SalesExpences'),
    func.sum(IncomeState.Agent_ex).label('Agent_ex'),
    func.sum(IncomeState.Agent_inland).label('Agent_inland'),
    func.sum(IncomeState.Moving_ex).label('Moving_ex'),
    func.sum(IncomeState.Moving_inland).label('Moving_inland'),
    func.sum(IncomeState.Insure_PL).label('Insure_PL'),
    func.sum(IncomeState.Comp_ex).label('Comp_ex'),
    func.sum(IncomeState.Comp_inland).label('Comp_inland'),
    func.sum(IncomeState.Packing_ex).label('Packing_ex'),
    func.sum(IncomeState.Packing_inland).label('Packing_inland'),
    func.sum(IncomeState.Royalty_inland).label('Royalty_inland'),
    func.sum(IncomeState.Royalty_ex).label('Royalty_ex'),
    func.sum(IncomeState.Advertisement_ex).label('Advertisement_ex'),
    func.sum(IncomeState.Advertisement_inland).label('Advertisement_inland'),
    func.sum(IncomeState.OperatingProfit1).label('OperatingProfit1'),
    func.sum(IncomeState.AdminExpences).label('AdminExpences'),
    func.sum(IncomeState.SalaryBOD).label('SalaryBOD'),
    func.sum(IncomeState.Salary).label('Salary'),
    func.sum(IncomeState.Pension).label('Pension'),
    func.sum(IncomeState.EmployBenefit).label('EmployBenefit'),
    func.sum(IncomeState.Travel).label('Travel'),
    func.sum(IncomeState.Telecommunication).label('Telecommunication'),
    func.sum(IncomeState.Utilities).label('Utilities'),
    func.sum(IncomeState.TaxesAndDues).label('TaxesAndDues'),
    func.sum(IncomeState.Rent).label('Rent'),
    func.sum(IncomeState.Depreciation).label('Depreciation'),
    func.sum(IncomeState.Amortization).label('Amortization'),
    func.sum(IncomeState.Maintanance).label('Maintanance'),
    func.sum(IncomeState.Insurance).label('Insurance'),
    func.sum(IncomeState.Entertainment).label('Entertainment'),
    func.sum(IncomeState.SampleFee).label('SampleFee'),
    func.sum(IncomeState.TransportFee).label('TransportFee'),
    func.sum(IncomeState.Commission).label('Commission'),
    func.sum(IncomeState.Service).label('Service'),
    func.sum(IncomeState.BedDept).label('BedDept'),
    func.sum(IncomeState.Consumable).label('Consumable'),
    func.sum(IncomeState.Training).label('Training'),
    func.sum(IncomeState.BooksAndPrinting).label('BooksAndPrinting'),
    func.sum(IncomeState.Vehicle).label('Vehicle'),
    func.sum(IncomeState.Conference).label('Conference'),
    func.sum(IncomeState.Miscellaneous).label('Miscellaneous'),
    func.sum(IncomeState.Overseas).label('Overseas'),
    func.sum(IncomeState.Warehouse).label('Warehouse'),
    func.sum(IncomeState.ReversalBadDebt).label('ReversalBadDebt'),
    func.sum(IncomeState.ResearchDevelopment).label('ResearchDevelopment'),
    func.sum(IncomeState.LeaseAmortization).label('LeaseAmortization'),
    func.sum(IncomeState.OperatingProfit2).label('OperatingProfit2'),
    func.sum(IncomeState.NonOperatingRevenue).label('NonOperatingRevenue'),
    func.sum(IncomeState.FinancialRevenue).label('FinancialRevenue'),
    func.sum(IncomeState.InterestRevenue).label('InterestRevenue'),
    func.sum(IncomeState.TradingSecuritiesInterest).label('TradingSecuritiesInterest'),
    func.sum(IncomeState.FxRevenue).label('FxRevenue'),
    func.sum(IncomeState.FxRevenue_Operating).label('FxRevenue_Operating'),
    func.sum(IncomeState.FxIncone_NonOp).label('FxIncone_NonOp'),
    func.sum(IncomeState.DerivativesRevenue).label('DerivativesRevenue'),
    func.sum(IncomeState.TradingSecuritiesRevenue).label('TradingSecuritiesRevenue'),
    func.sum(IncomeState.OtherNonOPRevenue).label('OtherNonOPRevenue'),
    func.sum(IncomeState.DividentRevenue).label('DividentRevenue'),
    func.sum(IncomeState.MiscellaneousProfit).label('MiscellaneousProfit'),
    func.sum(IncomeState.Gain_disposal_assets).label('Gain_disposal_assets'),
    func.sum(IncomeState.Gain_OtherNonOP).label('Gain_OtherNonOP'),
    func.sum(IncomeState.ReversalNRV).label('ReversalNRV'),
    func.sum(IncomeState.ReversalOtherAllowance).label('ReversalOtherAllowance'),
    func.sum(IncomeState.NonOperatingEnpences).label('NonOperatingEnpences'),
    func.sum(IncomeState.FinancialCost).label('FinancialCost'),
    func.sum(IncomeState.Interest).label('Interest'),
    func.sum(IncomeState.BondInterest).label('BondInterest'),
    func.sum(IncomeState.LossDisposalAR).label('LossDisposalAR'),
    func.sum(IncomeState.FxLoss).label('FxLoss'),
    func.sum(IncomeState.FxLoss_Operating).label('FxLoss_Operating'),
    func.sum(IncomeState.FxLoss_NonOP).label('FxLoss_NonOP'),
    func.sum(IncomeState.DerivativesLoss_tot).label('DerivativesLoss_tot'),
    func.sum(IncomeState.DerivativesLoss).label('DerivativesLoss'),
    func.sum(IncomeState.TradingSecuritiesLoss).label('TradingSecuritiesLoss'),
    func.sum(IncomeState.OtherNonOPLoss).label('OtherNonOPLoss'),
    func.sum(IncomeState.Donation).label('Donation'),
    func.sum(IncomeState.Loss_disposal_assets).label('Loss_disposal_assets'),
    func.sum(IncomeState.Loss_disposal_inventory).label('Loss_disposal_inventory'),
    func.sum(IncomeState.Loss_OtherNonOP).label('Loss_OtherNonOP'),
    func.sum(IncomeState.MiscellaneousLoss).label('MiscellaneousLoss'),
    func.sum(IncomeState.OtherAllowance).label('OtherAllowance'),
    func.sum(IncomeState.OrdinaryIncome1).label('OrdinaryIncome1'),
    func.sum(IncomeState.Gain_disposal_assets_NonOP).label('Gain_disposal_assets_NonOP'),
    func.sum(IncomeState.DebtForgiveness).label('DebtForgiveness'),
    func.sum(IncomeState.LeaseInterestIncome).label('LeaseInterestIncome'),
    func.sum(IncomeState.OtherSpecialGain).label('OtherSpecialGain'),
    func.sum(IncomeState.Loss_disposal_assets_NonOP).label('Loss_disposal_assets_NonOP'),
    func.sum(IncomeState.DebtForgivenessAmortization).label('DebtForgivenessAmortization'),
    func.sum(IncomeState.LeaseInterestCost).label('LeaseInterestCost'),
    func.sum(IncomeState.OtherSpecialLoss).label('OtherSpecialLoss'),
    func.sum(IncomeState.ValuationLoss).label('ValuationLoss'),
    func.sum(IncomeState.OrdinaryIncome2).label('OrdinaryIncome2'),
    func.sum(IncomeState.FxValuation).label('FxValuation'),
    func.sum(IncomeState.FxValuationGain_OP).label('FxValuationGain_OP'),
    func.sum(IncomeState.FxValuationGain_NonOP).label('FxValuationGain_NonOP'),
    func.sum(IncomeState.FxValuationLoss_OP).label('FxValuationLoss_OP'),
    func.sum(IncomeState.FxValuationLoss_NonOP).label('FxValuationLoss_NonOP'),
    func.sum(IncomeState.DerivativesVauation).label('DerivativesVauation'),
    func.sum(IncomeState.DerivativesVauationGain).label('DerivativesVauationGain'),
    func.sum(IncomeState.DerivativesVauationLoss).label('DerivativesVauationLoss'),
    func.sum(IncomeState.OrdinaryIncome3).label('OrdinaryIncome3'),
    func.sum(IncomeState.SecuritiesGain).label('SecuritiesGain'),
    func.sum(IncomeState.SecuritiesLoss).label('SecuritiesLoss'),
    func.sum(IncomeState.OrdinaryIncome4).label('OrdinaryIncome4'),
    func.sum(IncomeState.Tax).label('Tax'),
    func.sum(IncomeState.NetIncome).label('NetIncome')
).group_by('mm')

# 연결제거항목을 group화해서 조회 (계정 및 월만 조회)
sum_eli_element = select(
    eliminate.account.label('mm'),
    func.sum(eliminate.jan).label('01'),
    func.sum(eliminate.feb).label('02'),
    func.sum(eliminate.mar).label('03'),
    func.sum(eliminate.apr).label('04'),
    func.sum(eliminate.may).label('05'),
    func.sum(eliminate.jun).label('06'),
    func.sum(eliminate.jul).label('07'),
    func.sum(eliminate.aug).label('08'),
    func.sum(eliminate.sep).label('09'),
    func.sum(eliminate.oct).label('10'),
    func.sum(eliminate.nov).label('11'),
    func.sum(eliminate.dec).label('12')
).group_by(eliminate.account)

# 최종연결하여 연결을 넣어주기 위한 쿼리
sum_IS_normal_input = select(
    (IncomeState.version).label('version'),
    (IncomeState.year).label('year'),
    (IncomeState.mm).label('mm'),
    (literal_column('"1000"')).label('company'),
    (literal_column('"KRW"')).label('curr'),
    func.sum(IncomeState.Sales).label('Sales'),
    func.sum(IncomeState.CGS).label('CGS'),
    func.sum(IncomeState.CGM).label('CGM'),
    func.sum(IncomeState.Freight).label('Freight'),
    func.sum(IncomeState.Insure_ex).label('Insure_ex'),
    func.sum(IncomeState.GP).label('GP'),
    func.sum(IncomeState.SalesExpences).label('SalesExpences'),
    func.sum(IncomeState.Agent_ex).label('Agent_ex'),
    func.sum(IncomeState.Agent_inland).label('Agent_inland'),
    func.sum(IncomeState.Moving_ex).label('Moving_ex'),
    func.sum(IncomeState.Moving_inland).label('Moving_inland'),
    func.sum(IncomeState.Insure_PL).label('Insure_PL'),
    func.sum(IncomeState.Comp_ex).label('Comp_ex'),
    func.sum(IncomeState.Comp_inland).label('Comp_inland'),
    func.sum(IncomeState.Packing_ex).label('Packing_ex'),
    func.sum(IncomeState.Packing_inland).label('Packing_inland'),
    func.sum(IncomeState.Royalty_inland).label('Royalty_inland'),
    func.sum(IncomeState.Royalty_ex).label('Royalty_ex'),
    func.sum(IncomeState.Advertisement_ex).label('Advertisement_ex'),
    func.sum(IncomeState.Advertisement_inland).label('Advertisement_inland'),
    func.sum(IncomeState.OperatingProfit1).label('OperatingProfit1'),
    func.sum(IncomeState.AdminExpences).label('AdminExpences'),
    func.sum(IncomeState.SalaryBOD).label('SalaryBOD'),
    func.sum(IncomeState.Salary).label('Salary'),
    func.sum(IncomeState.Pension).label('Pension'),
    func.sum(IncomeState.EmployBenefit).label('EmployBenefit'),
    func.sum(IncomeState.Travel).label('Travel'),
    func.sum(IncomeState.Telecommunication).label('Telecommunication'),
    func.sum(IncomeState.Utilities).label('Utilities'),
    func.sum(IncomeState.TaxesAndDues).label('TaxesAndDues'),
    func.sum(IncomeState.Rent).label('Rent'),
    func.sum(IncomeState.Depreciation).label('Depreciation'),
    func.sum(IncomeState.Amortization).label('Amortization'),
    func.sum(IncomeState.Maintanance).label('Maintanance'),
    func.sum(IncomeState.Insurance).label('Insurance'),
    func.sum(IncomeState.Entertainment).label('Entertainment'),
    func.sum(IncomeState.SampleFee).label('SampleFee'),
    func.sum(IncomeState.TransportFee).label('TransportFee'),
    func.sum(IncomeState.Commission).label('Commission'),
    func.sum(IncomeState.Service).label('Service'),
    func.sum(IncomeState.BedDept).label('BedDept'),
    func.sum(IncomeState.Consumable).label('Consumable'),
    func.sum(IncomeState.Training).label('Training'),
    func.sum(IncomeState.BooksAndPrinting).label('BooksAndPrinting'),
    func.sum(IncomeState.Vehicle).label('Vehicle'),
    func.sum(IncomeState.Conference).label('Conference'),
    func.sum(IncomeState.Miscellaneous).label('Miscellaneous'),
    func.sum(IncomeState.Overseas).label('Overseas'),
    func.sum(IncomeState.Warehouse).label('Warehouse'),
    func.sum(IncomeState.ReversalBadDebt).label('ReversalBadDebt'),
    func.sum(IncomeState.ResearchDevelopment).label('ResearchDevelopment'),
    func.sum(IncomeState.LeaseAmortization).label('LeaseAmortization'),
    func.sum(IncomeState.OperatingProfit2).label('OperatingProfit2'),
    func.sum(IncomeState.NonOperatingRevenue).label('NonOperatingRevenue'),
    func.sum(IncomeState.FinancialRevenue).label('FinancialRevenue'),
    func.sum(IncomeState.InterestRevenue).label('InterestRevenue'),
    func.sum(IncomeState.TradingSecuritiesInterest).label('TradingSecuritiesInterest'),
    func.sum(IncomeState.FxRevenue).label('FxRevenue'),
    func.sum(IncomeState.FxRevenue_Operating).label('FxRevenue_Operating'),
    func.sum(IncomeState.FxIncone_NonOp).label('FxIncone_NonOp'),
    func.sum(IncomeState.DerivativesRevenue).label('DerivativesRevenue'),
    func.sum(IncomeState.TradingSecuritiesRevenue).label('TradingSecuritiesRevenue'),
    func.sum(IncomeState.OtherNonOPRevenue).label('OtherNonOPRevenue'),
    func.sum(IncomeState.DividentRevenue).label('DividentRevenue'),
    func.sum(IncomeState.MiscellaneousProfit).label('MiscellaneousProfit'),
    func.sum(IncomeState.Gain_disposal_assets).label('Gain_disposal_assets'),
    func.sum(IncomeState.Gain_OtherNonOP).label('Gain_OtherNonOP'),
    func.sum(IncomeState.ReversalNRV).label('ReversalNRV'),
    func.sum(IncomeState.ReversalOtherAllowance).label('ReversalOtherAllowance'),
    func.sum(IncomeState.NonOperatingEnpences).label('NonOperatingEnpences'),
    func.sum(IncomeState.FinancialCost).label('FinancialCost'),
    func.sum(IncomeState.Interest).label('Interest'),
    func.sum(IncomeState.BondInterest).label('BondInterest'),
    func.sum(IncomeState.LossDisposalAR).label('LossDisposalAR'),
    func.sum(IncomeState.FxLoss).label('FxLoss'),
    func.sum(IncomeState.FxLoss_Operating).label('FxLoss_Operating'),
    func.sum(IncomeState.FxLoss_NonOP).label('FxLoss_NonOP'),
    func.sum(IncomeState.DerivativesLoss_tot).label('DerivativesLoss_tot'),
    func.sum(IncomeState.DerivativesLoss).label('DerivativesLoss'),
    func.sum(IncomeState.TradingSecuritiesLoss).label('TradingSecuritiesLoss'),
    func.sum(IncomeState.OtherNonOPLoss).label('OtherNonOPLoss'),
    func.sum(IncomeState.Donation).label('Donation'),
    func.sum(IncomeState.Loss_disposal_assets).label('Loss_disposal_assets'),
    func.sum(IncomeState.Loss_disposal_inventory).label('Loss_disposal_inventory'),
    func.sum(IncomeState.Loss_OtherNonOP).label('Loss_OtherNonOP'),
    func.sum(IncomeState.MiscellaneousLoss).label('MiscellaneousLoss'),
    func.sum(IncomeState.OtherAllowance).label('OtherAllowance'),
    func.sum(IncomeState.OrdinaryIncome1).label('OrdinaryIncome1'),
    func.sum(IncomeState.Gain_disposal_assets_NonOP).label('Gain_disposal_assets_NonOP'),
    func.sum(IncomeState.DebtForgiveness).label('DebtForgiveness'),
    func.sum(IncomeState.LeaseInterestIncome).label('LeaseInterestIncome'),
    func.sum(IncomeState.OtherSpecialGain).label('OtherSpecialGain'),
    func.sum(IncomeState.Loss_disposal_assets_NonOP).label('Loss_disposal_assets_NonOP'),
    func.sum(IncomeState.DebtForgivenessAmortization).label('DebtForgivenessAmortization'),
    func.sum(IncomeState.LeaseInterestCost).label('LeaseInterestCost'),
    func.sum(IncomeState.OtherSpecialLoss).label('OtherSpecialLoss'),
    func.sum(IncomeState.ValuationLoss).label('ValuationLoss'),
    func.sum(IncomeState.OrdinaryIncome2).label('OrdinaryIncome2'),
    func.sum(IncomeState.FxValuation).label('FxValuation'),
    func.sum(IncomeState.FxValuationGain_OP).label('FxValuationGain_OP'),
    func.sum(IncomeState.FxValuationGain_NonOP).label('FxValuationGain_NonOP'),
    func.sum(IncomeState.FxValuationLoss_OP).label('FxValuationLoss_OP'),
    func.sum(IncomeState.FxValuationLoss_NonOP).label('FxValuationLoss_NonOP'),
    func.sum(IncomeState.DerivativesVauation).label('DerivativesVauation'),
    func.sum(IncomeState.DerivativesVauationGain).label('DerivativesVauationGain'),
    func.sum(IncomeState.DerivativesVauationLoss).label('DerivativesVauationLoss'),
    func.sum(IncomeState.OrdinaryIncome3).label('OrdinaryIncome3'),
    func.sum(IncomeState.SecuritiesGain).label('SecuritiesGain'),
    func.sum(IncomeState.SecuritiesLoss).label('SecuritiesLoss'),
    func.sum(IncomeState.OrdinaryIncome4).label('OrdinaryIncome4'),
    func.sum(IncomeState.Tax).label('Tax'),
    func.sum(IncomeState.NetIncome).label('NetIncome')
).where(or_(IncomeState.company == '9900',IncomeState.company == '-100')).group_by('version','year','mm')
